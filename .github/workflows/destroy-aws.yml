name: Destroy Infrastructure of AWS

on:
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  AWS_DEFAULT_REGION: ${{ secrets.TF_REGION }}
  TF_VAR_region:                ${{ secrets.TF_REGION }}
  TF_VAR_eks_cluster_name:     ${{ secrets.TF_EKS_CLUSTER_NAME }}
  TF_VAR_ecr_name:             ${{ secrets.TF_ECR_NAME }}
  TF_VAR_secrets_manager_name: ${{ secrets.TF_SECRET_NAME }}

jobs:
  destroy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.8.3"

      - name: Terraform Init
        working-directory: aws-terraform/
        run: terraform init

      - name: Export Terraform Outputs
        working-directory: aws-terraform/
        run: |
          echo "EKS_CLUSTER_NAME=$(terraform output -raw eks_cluster_name || echo '')" >> $GITHUB_ENV
          echo "REGION=$(terraform output -raw region || echo '${{ secrets.TF_REGION }}')" >> $GITHUB_ENV

      - name: Check if EKS Cluster Exists
        id: check_cluster
        run: |
          if aws eks describe-cluster --name $EKS_CLUSTER_NAME --region $REGION >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "EKS cluster does not exist. Skipping Kubernetes cleanup."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure kubectl and clean up Kubernetes resources
        if: steps.check_cluster.outputs.exists == 'true'
        run: |
          echo "Configuring kubectl..."
          aws eks update-kubeconfig --region $REGION --name $EKS_CLUSTER_NAME || true

          echo "Deleting Kubernetes resources..."
          kubectl delete ingress --all -A || true
          kubectl delete svc --all -A || true
          kubectl delete deployment --all -A || true
          kubectl delete statefulset --all -A || true
          kubectl delete daemonset --all -A || true
          kubectl delete pods --all -A || true
          kubectl delete pvc --all -A || true

          echo "Waiting for AWS to clean up ENIs and Load Balancers..."
          sleep 180

      - name: Terraform Destroy
        working-directory: aws-terraform/
        run: terraform destroy -auto-approve
