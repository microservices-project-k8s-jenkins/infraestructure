name: Deploy Infrastructure to AWS

on:
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.TF_REGION }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  TF_VAR_region:                ${{ secrets.TF_REGION }}
  TF_VAR_eks_cluster_name:     ${{ secrets.TF_EKS_CLUSTER_NAME }}
  TF_VAR_ecr_name:             ${{ secrets.TF_ECR_NAME }}

jobs:
  deploy_infra:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.8.3"
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: aws-terraform/
        run: terraform init

      - name: Terraform Validate
        working-directory: aws-terraform/
        run: terraform validate

      - name: Terraform Plan
        working-directory: aws-terraform/
        run: terraform plan -no-color

      - name: Terraform Apply
        working-directory: aws-terraform/
        run: terraform apply -auto-approve -no-color

      - name: Export Terraform Outputs
        working-directory: aws-terraform/
        run: |
          echo "ECR_REPOSITORY_URL=$(terraform output -raw ecr_repository_url)" > tf_outputs.env
          echo "EKS_CLUSTER_NAME=$(terraform output -raw eks_cluster_name)" >> tf_outputs.env
          echo "REGION=$(terraform output -raw region)" >> tf_outputs.env

      - name: Upload Terraform Outputs Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: aws-terraform/tf_outputs.env
          retention-days: 1
          overwrite: true

  bootstrap_argocd:
    needs: deploy_infra
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Terraform Outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs
          path: .

      - name: Load Terraform Outputs into Env Vars
        run: |
          cat tf_outputs.env
          source tf_outputs.env
          echo "EKS_CLUSTER_NAME=${EKS_CLUSTER_NAME}" >> $GITHUB_ENV
          echo "REGION=${REGION}" >> $GITHUB_ENV

      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig --region ${{ env.REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Add Helm Repos
        run: |
          helm repo add autoscaler https://kubernetes.github.io/autoscaler
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

      - name: Install Cluster Autoscaler
        run: |
          helm upgrade --install cluster-autoscaler autoscaler/cluster-autoscaler \
            --namespace kube-system \
            --set autoDiscovery.clusterName=${{ env.EKS_CLUSTER_NAME }} \
            --set awsRegion=${{ env.REGION }} \
            --set rbac.create=true \
            --set rbac.serviceAccount.create=true \
            --set rbac.serviceAccount.name=cluster-autoscaler \
            --set image.repository=registry.k8s.io/autoscaling/cluster-autoscaler \
            --set image.tag=v1.29.0 \
            --set extraArgs.scale-down-unneeded-time=10m \
            --set extraArgs.scale-down-delay-after-add=15m \
            --set extraArgs.scale-down-delay-after-delete=1m \
            --set extraArgs.scale-down-utilization-threshold=0.5 \
            --set extraArgs.skip-nodes-with-local-storage=true \
            --set extraArgs.skip-nodes-with-system-pods=true \
            --set extraArgs.balance-similar-node-groups=true \
            --set extraArgs.expander=least-waste \
            --set extraArgs.ok-total-unready-count=3 \
            --set extraArgs.max-total-unready-percentage=45 \
            --set extraArgs.max-node-provision-time=15m

      - name: Install Calico for Network Policies
        run: |
          helm repo add projectcalico https://docs.tigera.io/calico/charts
          helm repo update
          
          helm upgrade --install calico projectcalico/tigera-operator \
            --namespace tigera-operator \
            --create-namespace \
            --set installation.cni.type=AmazonVPC \
            --set installation.calicoNetwork.nodeAddressAutodetectionV4.interface="eth0"
            
      - name: Install Metrics server for HPA
        run: |
          helm repo add metrics-server https://kubernetes-sigs.github.io/metrics-server/
          helm repo update
          
          helm upgrade --install metrics-server metrics-server/metrics-server \
            --namespace kube-system

      - name: Install AWS EBS CSI Driver
        run: |
          git clone https://github.com/kubernetes-sigs/aws-ebs-csi-driver.git
          cd aws-ebs-csi-driver
          kubectl apply -k deploy/kubernetes/overlays/stable

      - name: Install Ingress Controller
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update

          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace

      - name: Install cert manager
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo update

          helm upgrade --install cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            --create-namespace \
            --set installCRDs=true

      - name: Install ECK Operator
        run: |
          helm repo add elastic https://helm.elastic.co
          helm repo update
          
          helm upgrade --install elastic-operator elastic/eck-operator \
            --namespace elastic-system \
            --create-namespace \
            --wait

      - name: Install ECK Stack with Logstash
        run: |
          kubectl wait --for condition=Established crd/elasticsearches.elasticsearch.k8s.elastic.co --timeout=120s || true
          kubectl wait --for condition=Established crd/kibanas.kibana.k8s.elastic.co --timeout=120s || true
          kubectl wait --for condition=Established crd/logstashes.logstash.k8s.elastic.co --timeout=120s || true
          kubectl wait --for condition=Established crd/beats.beat.k8s.elastic.co --timeout=120s || true
          curl -sSfL -o basic-eck.yaml https://raw.githubusercontent.com/elastic/cloud-on-k8s/3.0/deploy/eck-stack/examples/logstash/basic-eck.yaml
          sed -i '/daemonSet: null/d' basic-eck.yaml
          sed -i 's/type: log/type: filestream/g' basic-eck.yaml
          helm upgrade --install eck-stack-with-logstash elastic/eck-stack \
            --values basic-eck.yaml \
            --namespace elastic-stack \
            --create-namespace \
            --wait

      - name: Install Prometheus and Grafana (kube-prometheus-stack)
        run: |
          helm upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --create-namespace \
            --set grafana.adminPassword='Password@1234' \
            --set grafana.service.type=ClusterIP \
            --set prometheus.prometheusSpec.persistentVolume.enabled=false \
            --set alertmanager.alertmanagerSpec.persistentVolume.enabled=false \
            --set grafana.persistence.enabled=false

      - name: Clone Helm Charts Repository for ArgoCD
        run: |
          echo "Fetching secret from AWS Secrets Manager..."
          git clone https://github.com/microservices-project-k8s-jenkins/ecommerce-charts.git
          chmod +x ./ecommerce-charts/scripts/bootstrap.sh
          echo "Waiting for monitoring pods to be ready..."
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=kube-prometheus-stack -n monitoring --timeout=300s || echo "Timeout waiting for monitoring pods, continuing..."
          ./ecommerce-charts/scripts/bootstrap.sh